// async implementation w/ promises
// function using asynchronous results should be able to pause while waiting for results
async(function* () {
	try {
		const asyncResult1 = yield asyncFunc1("parameter1"); // yield on each asynchronous task
		const asyncResult2 = yield asyncFunc2("parameter2");
		const asyncResult3 = yield asyncFunc3("parameter3");
	} catch (error) {
		console.error(error);
	}
});

// helper iterator function (yielded from initializing generator func) to help control our generator
function async(generator) {
	const iterator = generator();
	//handler function for each value generated by the generator function
	function handle(iteratorResult) {
		if (iteratorResult.done) return; // stop when generator has no more results

		const iteratorValue = iteratorResult.value;

		// if generated value is a promise, register a success and failure callback
		if (iteratorValue instanceof Promise) {
			iteratorValue
				.then((res) => handle(iterator.next(res)))
				.catch((err) => iterator.throw(err));
		}
	}
}

// restart generator execution
try {
	handle(iterator.next());
} catch (error) {
	iterator.throw(error);
}
